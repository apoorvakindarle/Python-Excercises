# Author Apoorva Kindarle
# Date 18 oct 2022
import csv
from datetime import datetime as dt, timedelta as td
import pandas as pd


def print_details(data1, data2):
    def find2021(data2021):
        daywiseduration = {}

        startstations = {}
        endstations = {}

        nmembers = 0

        for i in range(1, len(data2021)):
            # calculating average daily trip duration using a hashmap
            # cleaning the date formats #m/#d/#y to #d-#d-#y

            date, sTime = data2021[i][2].split()
            eDate, eTime = data2021[i][3].split()
            if '-' in date:
                date = dt.strptime(date, '%m-%d-%y').strftime('%m/%d/%y')
                eDate = dt.strptime(date, '%m-%d-%y').strftime('%m/%d/%y')

            # take the cleaned format and calculate end - start and add to the hashmap

            if date in daywiseduration:
                daywiseduration[date][0] += td.total_seconds(
                    dt.strptime(eDate + " " + eTime, '%m/%d/%y %H:%M') - dt.strptime(date + " " + sTime,
                                                                                     '%m/%d/%y %H:%M'))
                daywiseduration[date][1] += 1
            else:
                daywiseduration[date] = [td.total_seconds(
                    dt.strptime(eDate + " " + eTime, '%m/%d/%y %H:%M') - dt.strptime(date + " " + sTime,
                                                                                     '%m/%d/%y %H:%M')), 1]

            # counting stations used for starts
            if data2021[i][4] in startstations:
                startstations[data2021[i][4]] += 1
            else:
                startstations[data2021[i][4]] = 1

            # counting stations used for ends
            if data2021[i][6] in endstations:
                endstations[data2021[i][6]] += 1
            else:
                endstations[data2021[i][6]] = 1

            # counting number of members and casual users
            if data2021[i][12] == 'member':
                nmembers += 1

        sum1 = 0
        count = 0

        for i in daywiseduration:
            sum1 += daywiseduration[i][0] / daywiseduration[i][1]
            count += 1

        avg = sum1 / count
        daily_avg1 = td(avg)

        # finding 5 most popular stations.
        popstart = []

        for i in range(5):
            max1 = 0
            count = 0
            for j in startstations:
                if startstations[j] > count:
                    max1 = j
                    count = startstations[j]
            if max1 == 0:
                continue
            popstart.append(max1)
            startstations.pop(max1)

        popend = []

        for i in range(5):
            max1 = 0
            count = 0
            for j in endstations:
                if endstations[j] > count:
                    max1 = j
                    count = endstations[j]
            if max1 == 0:
                continue
            popend.append(max1)
            endstations.pop(max1)

        print("Most Popular Start Stations : ", popstart)
        print("Most Popular End Stations : ", popend)

        print()
        print("daily average: ", daily_avg1)
        print("Members = ", nmembers, " Casual = ", len(data2021) - nmembers - 1)

    def find2016(data2016):
        daywiseduration = {}

        startstations = {}
        endstations = {}

        nmembers = 0

        for i in range(1, len(data2016)):
            # calculating average daily trip duration using a hashmap

            # cleaning the date formats #m/#d/#y to #d-#d-#y

            date, stime = data2016[i][1].split()
            eDate, etime = data2016[i][2].split()
            if '-' in date:
                date = dt.strptime(date, '%m-%d-%y').strftime('%m/%d/%y')
                edate = dt.strptime(date, '%m-%d-%y').strftime('%m/%d/%y')
            if date in daywiseduration:
                daywiseduration[date][0] += td.total_seconds(
                    dt.strptime(eDate + " " + etime, '%m/%d/%y %H:%M') - dt.strptime(date + " " + stime,
                                                                                     '%m/%d/%y %H:%M'))
                daywiseduration[date][1] += 1
            else:
                daywiseduration[date] = [td.total_seconds(
                    dt.strptime(eDate + " " + etime, '%m/%d/%y %H:%M') - dt.strptime(date + " " + stime,
                                                                                     '%m/%d/%y %H:%M')), 1]

            if data2016[i][4] in startstations:
                startstations[data2016[i][4]] += 1
            else:
                startstations[data2016[i][4]] = 1

            if data2016[i][8] in endstations:
                endstations[data2016[i][8]] += 1
            else:
                endstations[data2016[i][8]] = 1

            # counting number of members and casual users
            if data2016[i][12] == 'Subscriber':
                nmembers += 1

        # before moving on, find counts of start stations and end stations ->
        # finding daily average by iterating over the hashmap and getting average
        sum1 = 0
        count = 0

        for i in daywiseduration:
            sum1 += daywiseduration[i][0] / daywiseduration[i][1]
            count += 1

        avg = sum1 / count
        daily_avg2 = td(avg)

        # finding 5 most popular stations.
        popstart = []
        for i in range(5):
            max1 = 0
            count = 0
            for j in startstations:
                if startstations[j] > count:
                    max1 = j
                    count = startstations[j]
            if max1 == 0:
                continue
            popstart.append(max1)
            startstations.pop(max1)

        popend = []
        for i in range(5):
            max1 = 0
            count = 0
            for j in endstations:
                if endstations[j] > count:
                    max1 = j
                    count = endstations[j]
            if max1 == 0:
                continue
            popend.append(max1)
            endstations.pop(max1)

        print("Most Popular Start Stations : ", popstart)
        print("Most Popular End Stations : ", popend)

        print()
        print("daily average:", daily_avg2)
        print("Members = ", nmembers, " Casual = ", len(data2016) - nmembers - 1)

    print("Statistics for Year 2021")
    find2021(data1)
    print("\nStatistics for Year 2016")
    find2016(data2)

if __name__ == "__main__":
    file2021 = open('JC-202111-citibike-tripdata.csv')
    file2016 = open('JC-201611-citibike-tripdata.csv')

    reader2021 = csv.reader(file2021)
    reader2016 = csv.reader(file2016)

    data1 = list(reader2021)
    data2 = list(reader2016)

    print_details(data1, data2)


print("\n This is end of processing")
